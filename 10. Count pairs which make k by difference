package com.beginnerdsa.step3;
import java.util.HashMap;
import java.util.Map;


public class _11_count_pairs_which_makes_k_by_diff {
    public static void main(String[] args){

        //time complexity= O(n^2)

//        int[] arr={1,5,3,4,2};
//        int k=2;
//        int count=0;
//        for(int i=0;i<arr.length;i++){
//            for(int j=i+1;j<arr.length;j++){
//                if(arr[i]-arr[j]==k){
//                    count++;
//                }
//            }
//
//        }
//        System.out.println(count);



//optimized:

        int[] arr = {1,2,3,4,2,0,5,6,7};
        int k = 4;
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;

        for (int i = 0; i < arr.length; i++) {
            // check how many times (arr[i]-k) appeared before
            if (map.containsKey(arr[i] - k)) {
                count += map.get(arr[i] - k);
            }
            // always update frequency of arr[i]
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        System.out.println(count);
    }
}
