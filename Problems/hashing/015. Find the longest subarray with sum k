package com.beginnerdsa.step3;

import java.util.HashMap;
import java.util.Map;

public class _15_longest_subarray_with_sum_k{
    public static void main(String[] args){
        int[]arr={3,1,3,-2,2};
        int k=4;
        int mx=0;
        int t=0;
        int f=0;
        int min=Integer.MAX_VALUE;

        for(int i=0;i<arr.length;i++){
            int sum=0;
            for(int j=i;j<arr.length;j++){
                sum+=arr[j];
                if(sum==k){
                    if(mx<(j-i+1)){
                        mx=j-i;
                        t=i;
                        f=j;
                    }
                }
                if(sum==k && min>(j-i+1)){
                    min=j-i;
                }

            }
        }
        System.out.println(mx+" "+t+" "+f);
        System.out.println(min);
    }
}


/*

public class _15_longest_subarray_with_sum_k {
    public static int[] largestSubarraySumK(int[] nums, int k) {
        int maxLen = 0;
        int[] result = {-1, -1};

        for (int i = 0; i < nums.length; ++i) {
            int currentSum = 0;
            for (int j = i; j < nums.length; ++j) {
                currentSum += nums[j];
                if (currentSum == k && (j - i + 1) > maxLen) {
                    maxLen = j - i + 1;
                    result[0] = i ;  // 1-based index
                    result[1] = j ;
                }
            }
        }
        return result;
    }
    public static void main(String[] args){

        int[] nums = {1, 2, 3, 4, 5, -1, 6};
        int k = 9;
        int[] result = largestSubarraySumK(nums, k);
        if (result[0] != -1) {
            System.out.println("Largest subarray with sum " + k + " is from index " + result[0] + " to " + result[1]);
        } else {
            System.out.println("No subarray with sum " + k);
        }


    }
}
*/
