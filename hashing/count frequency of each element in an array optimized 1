
/*
more optimize-using hashing

we will take some constraints,
array has 0-50 numbers only
query is also asked from 0-50

we will make a new array, in which we will store frequencies

in that array, arr[i] will tell how many times "i" come in main array

*/

import java.util.Scanner;

class Ideone {
  public static void main(String[] args) throw java.lang.Exception {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] arr = new int[n];
    int[] hash = new int[51]; //make 1 size greater as we can have numbers from 0-50 so total 51 numbers

    for (int i = 0; i < n; i++) {    //o(n)
      arr[i] = sc.nextInt();
      hash[arr[i]] = hash[arr[i]] + 1;
    }
    int q = sc.nextInt();
    for (int i = 0; i < q; i++) { //o(q)
      int query = sc.nextInt();
      int count = hash[query];
      System.out.println(count);
    }

  }
 }


import java.util.Scanner;

class Ideone {
  public static void main(String[] args) throw java.lang.Exception {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] arr = new int[n];
    int[] hash = new int[51]; //make 1 size greater as we can have numbers from 0-50 so total 51 numbers

    for (int i = 0; i < n; i++) {    //o(n)
      arr[i] = sc.nextInt();
    }
    
   for (int i = 0; i < n; i++) {             //we can make a separate loop for this also but
                                            //upper loop is same as this so we merged in it
     hash[arr[i]] = hash[arr[i]] + 1;       //this is merged above
   }
    int q = sc.nextInt();
    for (int i = 0; i < q; i++) { //o(q)
      int query = sc.nextInt();
      int count = hash[query];
      System.out.println(count);
    }

  }
 }
/*time complexity-- O(N+Q)
space complexity-- O(maximum number in original array)= O(50)
as we have to make a temporary hash array to store frequency

space complexity can be very big if array has so many elements then we have to make
very big hash array

final solution: we use hashmap (data structure) instead of hash array (key, value) pair mapping



*/

